import 'dart:convert';
import 'dart:math';
import 'package:crypto/crypto.dart';
import '../models/user.dart';
import 'json_user_service.dart';

class AuthResult {
  final bool success;
  final String? message;
  final User? user;
  final String? sessionToken;

  AuthResult({
    required this.success,
    this.message,
    this.user,
    this.sessionToken,
  });
}

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final JsonUserService _userService = JsonUserService();
  User? _currentUser;
  String? _currentSessionToken;

  // –ì–µ—Ç—Ç–µ—Ä—ã
  User? get currentUser => _currentUser;
  bool get isLoggedIn => _currentUser != null && _currentSessionToken != null;
  String? get sessionToken => _currentSessionToken;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  Future<void> initialize() async {
    print('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthService...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JSON —Å–µ—Ä–≤–∏—Å
    await _userService.initialize();
    
    print('‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<AuthResult> register({
    required String name,
    required String email,
    required String phone,
    required String password,
  }) async {
    try {
      print('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $email');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (_userService.isEmailTaken(email)) {
        return AuthResult(
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        );
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      final validationResult = _validateRegistrationData(name, email, phone, password);
      if (!validationResult.success) {
        return validationResult;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final user = User(
        name: name.trim(),
        email: email.trim().toLowerCase(),
        phone: phone.trim(),
        passwordHash: _hashPassword(password),
        createdAt: DateTime.now(),
        loyaltyPoints: 100, // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã
      );

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ JSON –±–∞–∑—É
      final createdUser = await _userService.addUser(user);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await _createSession(createdUser);
      
      return AuthResult(
        success: true,
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        user: createdUser,
        sessionToken: _currentSessionToken,
      );

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<AuthResult> login({
    required String email,
    required String password,
  }) async {
    try {
      print('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: $email');

      final user = _userService.findUserByEmail(email.trim().toLowerCase());
      if (user == null) {
        return AuthResult(
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        );
      }

      if (!user.isActive) {
        return AuthResult(
          success: false,
          message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
      if (!_verifyPassword(password, user.passwordHash)) {
        return AuthResult(
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        );
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      final updatedUser = user.copyWith(lastLoginAt: DateTime.now());
      await _userService.updateUser(updatedUser);

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      await _createSession(updatedUser);
      
      return AuthResult(
        success: true,
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${updatedUser.name}!',
        user: updatedUser,
        sessionToken: _currentSessionToken,
      );

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    try {
      print('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
      _currentUser = null;
      _currentSessionToken = null;
      print('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  Future<void> _createSession(User user) async {
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
      final sessionToken = _generateSessionToken();

      _currentUser = user;
      _currentSessionToken = sessionToken;

      print('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${user.name}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: $e');
    }
  }

  String _hashPassword(String password) {
    final bytes = utf8.encode(password + 'sushiroll_salt_2024');
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  bool _verifyPassword(String password, String hash) {
    return _hashPassword(password) == hash;
  }

  String _generateSessionToken() {
    final random = Random.secure();
    final bytes = List<int>.generate(32, (i) => random.nextInt(256));
    return base64Url.encode(bytes);
  }

  AuthResult _validateRegistrationData(String name, String email, String phone, String password) {
    if (name.trim().length < 2) {
      return AuthResult(
        success: false,
        message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
      );
    }

    if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(email)) {
      return AuthResult(
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
      );
    }

    if (phone.trim().length < 10) {
      return AuthResult(
        success: false,
        message: '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä',
      );
    }

    if (password.length < 6) {
      return AuthResult(
        success: false,
        message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
      );
    }

    return AuthResult(success: true);
  }
}
