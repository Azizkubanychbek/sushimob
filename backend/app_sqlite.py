from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
import os
import json
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è SQLite
app.config['SECRET_KEY'] = 'your-super-secret-key-change-this-in-production'
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sushi_express.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'jwt-secret-string'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(days=30)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
from models import db, User, Ingredient, Roll, RollIngredient, Set, SetRoll, Order, OrderItem, OtherItem, LoyaltyCard, LoyaltyRoll, LoyaltyCardUsage, ReferralUsage
db.init_app(app)

jwt = JWTManager()
jwt.init_app(app)

CORS(app)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ db
# from models import User, Ingredient, Roll, RollIngredient, Set, SetRoll, Order, OrderItem


# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'OK', 
        'message': 'Sushi Express API is running!',
        'database': 'SQLite',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['name', 'email', 'phone', 'password']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –õ–æ–∫–∞—Ü–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
        location = data.get('location', '').strip() if data.get('location') else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if len(data['password']) < 6:
            return jsonify({'error': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = User.query.filter_by(email=data['email'].lower()).first()
        if existing_user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        referral_code = data.get('referral_code', '').strip().upper() if data.get('referral_code') else None
        referrer_user = None
        bonus_points = 0
        
        if referral_code:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            referrer_user = User.query.filter_by(referral_code=referral_code).first()
            if not referrer_user:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'}), 400
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
            if referrer_user.email.lower() == data['email'].strip().lower():
                return jsonify({'error': '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'}), 400
            
            bonus_points = 200  # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            name=data['name'].strip(),
            email=data['email'].strip().lower(),
            phone=data['phone'].strip(),
            location=data.get('location', '').strip() if data.get('location') else None,
            password_hash=generate_password_hash(data['password']),
            referred_by=referral_code,
            bonus_points=bonus_points
        )
        
        db.session.add(new_user)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import random
        import string
        
        def generate_referral_code():
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        while True:
            new_referral_code = generate_referral_code()
            existing_code = User.query.filter_by(referral_code=new_referral_code).first()
            if not existing_code:
                break
        
        new_user.referral_code = new_referral_code
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if referrer_user and referral_code:
            referral_usage = ReferralUsage(
                referrer_id=referrer_user.id,
                referred_id=new_user.id,
                referral_code=referral_code,
                bonus_points_awarded=200
            )
            db.session.add(referral_usage)
            
            print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {referral_code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {new_user.name}, –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer_user.name}")
        
        db.session.commit()
        
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {new_user.name} ({new_user.email})")
        print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_referral_code}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        access_token = create_access_token(identity=new_user.id)
        
        return jsonify({
            'success': True,
            'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            'user': new_user.to_dict(),
            'access_token': access_token
        }), 201
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

@app.route('/api/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not data.get('email') or not data.get('password'):
            return jsonify({'error': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.filter_by(email=data['email'].lower()).first()
        if not user:
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if not check_password_hash(user.password_hash, data['password']):
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        if not user.is_active:
            return jsonify({'error': '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}), 401
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.last_login_at = datetime.utcnow()
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É: {user.name} ({user.email})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        access_token = create_access_token(identity=user.id)
        
        return jsonify({
            'success': True,
            'message': f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!',
            'user': user.to_dict(),
            'access_token': access_token
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}'}), 500

@app.route('/api/profile', methods=['GET'])
@jwt_required()
def get_profile():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'success': True,
            'user': user.to_dict()
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}), 500

@app.route('/api/users', methods=['GET'])
@jwt_required()
def get_users():
    try:
        users = User.query.all()
        print(f"üîç –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—Å–µ–≥–æ: {len(users)}")
        return jsonify({
            'success': True,
            'users': [user.to_dict() for user in users],
            'total': len(users)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/api/profile', methods=['PUT'])
@app.route('/api/profile/update', methods=['PUT'])
@jwt_required()
def update_profile():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if 'name' in data:
            user.name = data['name'].strip()
        if 'phone' in data:
            user.phone = data['phone'].strip()
        if 'location' in data:
            user.location = data['location'].strip() if data['location'] else None
        
        db.session.commit()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        return jsonify({
            'success': True,
            'message': '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'user': user.to_dict()
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}), 500

@app.route('/api/profile/change-password', methods=['PUT'])
@jwt_required()
def change_password():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        current_password = data.get('current_password')
        new_password = data.get('new_password')
        
        if not current_password or not new_password:
            return jsonify({'error': '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        if not check_password_hash(user.password_hash, current_password):
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        if len(new_password) < 6:
            return jsonify({'error': '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        user.password_hash = generate_password_hash(new_password)
        db.session.commit()
        
        print(f"‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} –∏–∑–º–µ–Ω–µ–Ω")
        
        return jsonify({
            'success': True,
            'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}'}), 500

@app.route('/api/debug/users', methods=['GET'])
def debug_users():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        users = User.query.all()
        print(f"üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—Å–µ–≥–æ: {len(users)}")
        return jsonify({
            'success': True,
            'users': [user.to_dict() for user in users],
            'total': len(users),
            'database_file': 'sushi_express.db'
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/favorites/add', methods=['POST'])
@jwt_required()
def add_to_favorites():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–ª–∞/—Å–µ—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        item_type = data.get('item_type') or data.get('type')  # 'roll' –∏–ª–∏ 'set'
        item_id = data.get('item_id') or data.get('id')
        
        if not item_type or not item_id:
            return jsonify({'error': '–¢–∏–ø –∏ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        favorites = json.loads(user.favorites) if user.favorites else {}
        
        if item_type not in favorites:
            favorites[item_type] = []
        
        if item_id not in favorites[item_type]:
            favorites[item_type].append(item_id)
            user.favorites = json.dumps(favorites)
            db.session.commit()
            
            print(f"‚úÖ {item_type} {item_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è {user.name}")
            
            return jsonify({
                'success': True,
                'message': f'{item_type.title()} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                'favorites': favorites
            }), 200
        else:
            return jsonify({'error': f'{item_type.title()} —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'}), 400
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/favorites/remove', methods=['POST', 'DELETE'])
@jwt_required()
def remove_from_favorites():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–ª–∞/—Å–µ—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        data = request.get_json()
        item_type = data.get('item_type') or data.get('type')  # 'roll' –∏–ª–∏ 'set'
        item_id = data.get('item_id') or data.get('id')
        
        if not item_type or not item_id:
            return jsonify({'error': '–¢–∏–ø –∏ ID —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        favorites = json.loads(user.favorites) if user.favorites else {}
        
        if item_type in favorites and item_id in favorites[item_type]:
            favorites[item_type].remove(item_id)
            user.favorites = json.dumps(favorites)
            db.session.commit()
            
            print(f"‚úÖ {item_type} {item_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è {user.name}")
            
            return jsonify({
                'success': True,
                'message': f'{item_type.title()} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
                'favorites': favorites
            }), 200
        else:
            return jsonify({'error': f'{item_type.title()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º'}), 404
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/favorites', methods=['GET'])
@jwt_required()
def get_favorites():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        favorites = json.loads(user.favorites) if user.favorites else {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π Flutter
        favorites_list = []
        for item_type, item_ids in favorites.items():
            for item_id in item_ids:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
                item_data = None
                if item_type == 'roll':
                    roll = Roll.query.get(item_id)
                    if roll:
                        item_data = roll.to_dict()
                elif item_type == 'set':
                    set_item = Set.query.get(item_id)
                    if set_item:
                        item_data = set_item.to_dict()
                
                if item_data:
                    favorites_list.append({
                        'id': len(favorites_list) + 1,
                        'item_type': item_type,
                        'item_id': item_id,
                        'item': item_data,
                        'added_at': datetime.now().isoformat()
                    })
        
        return jsonify({
            'success': True,
            'favorites': favorites_list,
            'total': len(favorites_list)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è —Ä–æ–ª–ª–æ–≤ =====
@app.route('/api/rolls', methods=['GET'])
def get_rolls():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–ª–æ–≤"""
    try:
        rolls = Roll.query.all()
        return jsonify({
            'success': True,
            'rolls': [roll.to_dict() for roll in rolls],
            'total': len(rolls)
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–ª–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/rolls/<int:roll_id>', methods=['GET'])
def get_roll(roll_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–ª–ª–∞"""
    try:
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'success': True,
            'roll': roll.to_dict()
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–ª–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è —Å–µ—Ç–æ–≤ =====
@app.route('/api/sets', methods=['GET'])
def get_sets():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤"""
    try:
        sets = Set.query.all()
        return jsonify({
            'success': True,
            'sets': [set_item.to_dict() for set_item in sets],
            'total': len(sets)
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/sets/<int:set_id>', methods=['GET'])
def get_set(set_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ç–∞"""
    try:
        set_item = Set.query.get(set_id)
        if not set_item:
            return jsonify({'error': '–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'success': True,
            'set': set_item.to_dict()
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Å–æ—É—Å—ã, –Ω–∞–ø–∏—Ç–∫–∏) =====
@app.route('/api/other-items', methods=['GET'])
def get_other_items():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        other_items = OtherItem.query.all()
        return jsonify({
            'success': True,
            'other_items': [item.to_dict() for item in other_items],
            'total': len(other_items)
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/other-items/<int:item_id>', methods=['GET'])
def get_other_item(item_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        item = OtherItem.query.get(item_id)
        if not item:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'success': True,
            'other_item': item.to_dict()
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/other-items/category/<category>', methods=['GET'])
def get_other_items_by_category(category):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        items = OtherItem.query.filter_by(category=category).all()
        return jsonify({
            'success': True,
            'category': category,
            'other_items': [item.to_dict() for item in items],
            'total': len(items)
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ =====
@app.route('/api/orders', methods=['POST'])
@jwt_required()
def create_order():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart = json.loads(user.cart) if user.cart else []
        
        if not cart:
            return jsonify({'error': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}), 400
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        phone = data.get('phone', user.phone)
        delivery_address = data.get('delivery_address', user.location or '')
        payment_method = data.get('payment_method', 'cash')
        comment = data.get('comment', '')
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        total_price = 0
        has_paid_items = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        for cart_item in cart:
            item_type = cart_item['item_type']
            item_id = cart_item['item_id']
            quantity = cart_item['quantity']
            
            unit_price = 0
            if item_type == 'roll':
                roll = Roll.query.get(item_id)
                if roll:
                    unit_price = roll.sale_price
                    has_paid_items = True
            elif item_type == 'set':
                set_item = Set.query.get(item_id)
                if set_item:
                    unit_price = set_item.set_price
                    has_paid_items = True
            elif item_type == 'loyalty_roll':
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–æ–ª–ª—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                unit_price = 0.0
            elif item_type == 'bonus_points':
                # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã (—Å–∫–∏–¥–∫–∞) - –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø–ª–∞—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
                unit_price = cart_item.get('price', 0)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            
            total_price += unit_price * quantity
        
        # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã (—Å–∫–∏–¥–∫–∏), –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
        if not has_paid_items:
            return jsonify({'error': '–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞'}), 400
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—É–º–º—É –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ 0
        if data.get('total_amount', 0) > 0:
            total_price = data.get('total_amount', 0)
        elif data.get('total_price', 0) > 0:
            total_price = data.get('total_price', 0)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º
        if total_price < 0:
            return jsonify({'error': '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'}), 400
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã
        if data.get('total_amount', 0) < 0 or data.get('total_price', 0) < 0:
            return jsonify({'error': '–ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            user_id=user_id,
            phone=phone,
            delivery_address=delivery_address,
            payment_method=payment_method,
            total_price=total_price,
            comment=comment
        )
        
        db.session.add(order)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        for cart_item in cart:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            item_type = cart_item['item_type']
            item_id = cart_item['item_id']
            quantity = cart_item['quantity']
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—ã
            unit_price = 0
            if item_type == 'roll':
                roll = Roll.query.get(item_id)
                if roll:
                    unit_price = roll.sale_price
            elif item_type == 'set':
                set_item = Set.query.get(item_id)
                if set_item:
                    unit_price = set_item.set_price
            elif item_type == 'loyalty_roll':
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–æ–ª–ª—ã –∏–∑ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
                roll = Roll.query.get(item_id)
                if roll:
                    unit_price = 0.0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
            elif item_type == 'bonus_points':
                # –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã (—Å–∫–∏–¥–∫–∞) - –Ω–µ —Å–æ–∑–¥–∞–µ–º OrderItem –¥–ª—è –Ω–∏—Ö
                continue
            
            total_item_price = unit_price * quantity
            
            order_item = OrderItem(
                order_id=order.id,
                item_type=item_type,
                item_id=item_id,
                quantity=quantity,
                unit_price=unit_price,
                total_price=total_item_price
            )
            db.session.add(order_item)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        user.cart = '[]'
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        process_loyalty_card(user_id, total_price)
        
        db.session.commit()
        
        print(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order.id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(cart)}")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}‚ÇΩ")
        
        return jsonify({
            'success': True,
            'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            'order': order.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç =====
@app.route('/api/loyalty/cards', methods=['GET'])
@jwt_required()
def get_loyalty_cards():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = LoyaltyCard.query.filter_by(user_id=user_id).order_by(LoyaltyCard.created_at.desc()).all()
        
        return jsonify({
            'success': True,
            'cards': [card.to_dict() for card in cards],
            'total': len(cards)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/loyalty/available-rolls', methods=['GET'])
@jwt_required()
def get_available_loyalty_rolls():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–ª—ã
        loyalty_rolls = LoyaltyRoll.query.filter_by(is_available=True).all()
        
        return jsonify({
            'success': True,
            'rolls': [lr.to_dict() for lr in loyalty_rolls],
            'total': len(loyalty_rolls)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/loyalty/use-card', methods=['POST'])
@jwt_required()
def use_loyalty_card():
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        card_id = data.get('card_id')
        roll_id = data.get('roll_id')
        
        if not card_id or not roll_id:
            return jsonify({'error': 'ID –∫–∞—Ä—Ç—ã –∏ —Ä–æ–ª–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        card = LoyaltyCard.query.filter_by(
            id=card_id, 
            user_id=user_id, 
            is_completed=True
        ).first()
        
        if not card:
            return jsonify({'error': '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'}), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–ª–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        loyalty_roll = LoyaltyRoll.query.filter_by(
            roll_id=roll_id, 
            is_available=True
        ).first()
        
        if not loyalty_roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–ª–µ
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–ª –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–µ–Ω–æ–π 0‚ÇΩ
        cart = json.loads(user.cart) if user.cart else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–æ–ª–ª –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_item_exists = False
        for item in cart:
            if item.get('item_type') == 'loyalty_roll' and item.get('item_id') == roll_id:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                item['quantity'] += 1
                cart_item_exists = True
                break
        
        if not cart_item_exists:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            cart_item = {
                'item_type': 'loyalty_roll',
                'item_id': roll_id,
                'quantity': 1,
                'price': 0.0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ
                'name': roll.name,
                'is_loyalty': True  # –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–æ–ª–ª
            }
            cart.append(cart_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.cart = json.dumps(cart)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã
        usage = LoyaltyCardUsage(
            user_id=user_id,
            loyalty_card_id=card_id,
            roll_id=roll_id
        )
        db.session.add(usage)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        db.session.delete(card)
        
        db.session.commit()
        
        print(f"‚úÖ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: –∫–∞—Ä—Ç–∞ {card.card_number}, —Ä–æ–ª–ª {roll.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
        
        return jsonify({
            'success': True,
            'message': f'–†–æ–ª–ª "{roll.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
            'used_card': card.to_dict(),
            'selected_roll': loyalty_roll.to_dict(),
            'added_to_cart': True
        }), 200
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/loyalty/history', methods=['GET'])
@jwt_required()
def get_loyalty_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        history = LoyaltyCardUsage.query.filter_by(user_id=user_id).order_by(LoyaltyCardUsage.used_at.desc()).all()
        
        return jsonify({
            'success': True,
            'history': [h.to_dict() for h in history],
            'total': len(history)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/orders', methods=['GET'])
@jwt_required()
def get_user_orders():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_jwt_identity()
        orders = Order.query.filter_by(user_id=user_id).order_by(Order.created_at.desc()).all()
        
        return jsonify({
            'success': True,
            'orders': [order.to_dict() for order in orders],
            'total': len(orders)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/orders/<int:order_id>', methods=['GET'])
@jwt_required()
def get_order(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = get_jwt_identity()
        order = Order.query.get(order_id)
        
        if not order:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        if order.user_id != user_id:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        return jsonify({
            'success': True,
            'order': order.to_dict()
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ =====
@app.route('/api/ingredients', methods=['GET'])
def get_ingredients():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    try:
        ingredients = Ingredient.query.all()
        return jsonify({
            'success': True,
            'ingredients': [ing.to_dict() for ing in ingredients],
            'total': len(ingredients)
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ =====
# –§—É–Ω–∫—Ü–∏—è get_favorites —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ (—Å—Ç—Ä–æ–∫–∞ ~348)

# –§—É–Ω–∫—Ü–∏—è add_to_favorites —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ (—Å—Ç—Ä–æ–∫–∞ ~310)

# –§—É–Ω–∫—Ü–∏—è remove_from_favorites —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ (—Å—Ç—Ä–æ–∫–∞ ~330)

@app.route('/api/favorites/clear', methods=['DELETE'])
@jwt_required()
def clear_favorites():
    """–û—á–∏—Å—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        user.favorites = '{}'
        db.session.commit()
        
        print(f"‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}")
        
        return jsonify({
            'success': True,
            'message': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ'
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# ===== API –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã =====
@app.route('/api/cart', methods=['GET'])
@jwt_required()
def get_cart():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –ø–æ–ª–µ cart –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cart = json.loads(user.cart) if user.cart else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cart_with_items = []
        for cart_item in cart:
            item_data = None
            if cart_item['item_type'] == 'roll':
                roll = Roll.query.get(cart_item['item_id'])
                if roll:
                    item_data = roll.to_dict()
            elif cart_item['item_type'] == 'set':
                set_item = Set.query.get(cart_item['item_id'])
                if set_item:
                    item_data = set_item.to_dict()
            elif cart_item['item_type'] == 'loyalty_roll':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤ –∏–∑ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
                roll = Roll.query.get(cart_item['item_id'])
                if roll:
                    item_data = roll.to_dict()
                    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤
                    item_data['sale_price'] = 0.0
            elif cart_item['item_type'] == 'bonus_points':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
                item_data = {
                    'id': 'bonus',
                    'name': cart_item.get('name', '–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã'),
                    'description': '–°–∫–∏–¥–∫–∞ –∑–∞ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã',
                    'sale_price': cart_item.get('price', 0),
                    'image_url': None
                }
            
            if item_data:
                cart_item_with_data = cart_item.copy()
                cart_item_with_data['item'] = item_data
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
                if cart_item['item_type'] == 'loyalty_roll':
                    cart_item_with_data['price'] = 0.0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                    cart_item_with_data['is_loyalty'] = True
                    cart_item_with_data['is_bonus'] = False
                elif cart_item['item_type'] == 'bonus_points':
                    cart_item_with_data['price'] = item_data.get('sale_price', 0)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ = —Å–∫–∏–¥–∫–∞
                    cart_item_with_data['is_loyalty'] = False
                    cart_item_with_data['is_bonus'] = True
                else:
                    cart_item_with_data['price'] = item_data.get('sale_price', item_data.get('set_price', 0))
                    cart_item_with_data['is_loyalty'] = False
                    cart_item_with_data['is_bonus'] = False
                
                cart_with_items.append(cart_item_with_data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        total_price = 0
        for item in cart_with_items:
            if item.get('price'):
                total_price += item['price'] * item['quantity']
        
        return jsonify({
            'success': True,
            'cart': cart_with_items,
            'total': len(cart_with_items),
            'total_price': total_price,
            'bonus_points': user.bonus_points,
            'can_use_bonus': user.bonus_points > 0 and total_price > 0
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/cart/add', methods=['POST'])
@jwt_required()
def add_to_cart():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        if not data.get('item_type') or not data.get('item_id') or not data.get('quantity'):
            return jsonify({'error': '–¢–∏–ø, ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity = data.get('quantity')
        if quantity <= 0:
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        item_type = data['item_type']
        item_id = data['item_id']
        
        if item_type == 'roll':
            roll = Roll.query.get(item_id)
            if not roll:
                return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        elif item_type == 'set':
            set_item = Set.query.get(item_id)
            if not set_item:
                return jsonify({'error': '–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        else:
            return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞'}), 400
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –ø–æ–ª–µ cart –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cart = json.loads(user.cart) if user.cart else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item = None
        for item in cart:
            if item['item_type'] == data['item_type'] and item['item_id'] == data['item_id']:
                existing_item = item
                break
        
        if existing_item:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            existing_item['quantity'] += quantity
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            cart.append({
                'id': len(cart) + 1,
                'item_type': data['item_type'],
                'item_id': data['item_id'],
                'quantity': quantity,
                'added_at': datetime.now().isoformat()
            })
        
        user.cart = json.dumps(cart)
        db.session.commit()
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: {data['item_type']} ID {data['item_id']}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity}")
        
        return jsonify({
            'success': True,
            'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
            'cart': cart
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/cart/remove', methods=['DELETE'])
@app.route('/api/cart/remove/<int:item_id>', methods=['DELETE'])
@jwt_required()
def remove_from_cart(item_id=None):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –î–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ —Å item_id –≤ URL, –Ω–µ —Ç—Ä–µ–±—É–µ–º JSON
        if item_id is None:
            data = request.get_json() or {}
            item_id = data.get('item_id')
            if not item_id:
                return jsonify({'error': 'ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            item_type = data.get('item_type')
            if not item_type:
                return jsonify({'error': '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        else:
            # –ï—Å–ª–∏ item_id –ø–µ—Ä–µ–¥–∞–Ω –≤ URL, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
            cart = json.loads(user.cart) if user.cart else []
            item_type = None
            for item in cart:
                if item.get('id') == item_id:
                    item_type = item.get('item_type')
                    break
            
            if not item_type:
                return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ JSON –ø–æ–ª—è
        cart = json.loads(user.cart) if user.cart else []
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏ —Ç–∏–ø–æ–º
        original_length = len(cart)
        cart = [item for item in cart if not (item.get('id') == item_id and item.get('item_type') == item_type)]
        
        if len(cart) == original_length:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'}), 404
        
        user.cart = json.dumps(cart)
        db.session.commit()
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ID {item_id}")
        
        return jsonify({
            'success': True,
            'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/cart/update', methods=['PUT'])
@app.route('/api/cart/update/<int:item_id>', methods=['PUT'])
@jwt_required()
def update_cart_item(item_id=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        if not data:
            return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã'}), 400
        
        # –ï—Å–ª–∏ item_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ URL, –±–µ—Ä–µ–º –∏–∑ JSON
        if item_id is None:
            item_id = data.get('item_id')
            if not item_id:
                return jsonify({'error': 'ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        item_type = data.get('item_type')
        if not item_type:
            return jsonify({'error': '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        if not data.get('quantity'):
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        new_quantity = int(data['quantity'])
        cart = json.loads(user.cart) if user.cart else []
        
        if new_quantity <= 0:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            cart = [item for item in cart if not (item.get('item_id') == item_id and item.get('item_type') == item_type)]
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            for item in cart:
                if item.get('item_id') == item_id and item.get('item_type') == item_type:
                    item['quantity'] = new_quantity
                    break
            else:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'}), 404
        
        user.cart = json.dumps(cart)
        
        db.session.commit()
        
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ID {item_id}, –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_quantity}")
        
        return jsonify({
            'success': True,
            'message': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/cart/clear', methods=['DELETE'])
@jwt_required()
def clear_cart():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        user.cart = '[]'
        db.session.commit()
        
        print(f"‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return jsonify({
            'success': True,
            'message': '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞'
        }), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

# –ê–¥–º–∏–Ω API endpoints
@app.route('/api/admin/users', methods=['GET'])
@jwt_required()
def admin_get_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        users = User.query.all()
        return jsonify({
            'users': [user.to_dict() for user in users]
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/rolls', methods=['GET', 'POST'])
@jwt_required()
def admin_rolls():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–ª–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–ª–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        if request.method == 'GET':
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–ª–æ–≤
            rolls = Roll.query.all()
            return jsonify({
                'rolls': [roll.to_dict() for roll in rolls],
                'total': len(rolls)
            })
        elif request.method == 'POST':
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–ª–ª
            data = request.get_json()
            
            new_roll = Roll(
                name=data['name'],
                description=data.get('description', ''),
                cost_price=float(data['cost_price']),
                sale_price=float(data['sale_price']),
                image_url=data.get('image_url', ''),
                is_popular=data.get('is_popular', False),
                is_new=data.get('is_new', False)
            )
            
            db.session.add(new_roll)
            db.session.commit()
            
            return jsonify({
                'message': '–†–æ–ª–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'roll': new_roll.to_dict()
            }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/rolls/<int:roll_id>', methods=['PUT'])
@jwt_required()
def admin_update_roll(roll_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        roll.name = data.get('name', roll.name)
        roll.description = data.get('description', roll.description)
        roll.cost_price = float(data.get('cost_price', roll.cost_price))
        roll.sale_price = float(data.get('sale_price', roll.sale_price))
        roll.image_url = data.get('image_url', roll.image_url)
        roll.is_popular = data.get('is_popular', roll.is_popular)
        roll.is_new = data.get('is_new', roll.is_new)
        roll.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–†–æ–ª–ª –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'roll': roll.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/rolls/<int:roll_id>', methods=['DELETE'])
@jwt_required()
def admin_delete_roll(roll_id):
    """–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        db.session.delete(roll)
        db.session.commit()
        
        return jsonify({'message': '–†–æ–ª–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/rolls/<int:roll_id>/recipe', methods=['GET'])
def get_roll_recipe(roll_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—É—Ä—É —Ä–æ–ª–ª–∞"""
    try:
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ä–æ–ª–ª–∞
        roll_ingredients = RollIngredient.query.filter_by(roll_id=roll_id).all()
        
        ingredients = []
        for roll_ingredient in roll_ingredients:
            ingredient = Ingredient.query.get(roll_ingredient.ingredient_id)
            if ingredient:
                ingredients.append({
                    'ingredient': ingredient.to_dict(),
                    'quantity': roll_ingredient.amount_per_roll,
                    'unit': '–≥—Ä'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞–º–º—ã
                })
        
        return jsonify({
            'roll': roll.to_dict(),
            'ingredients': ingredients
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Ä–æ–ª–ª–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/admin/rolls/<int:roll_id>/recipe', methods=['GET'])
@jwt_required()
def admin_get_roll_recipe(roll_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—É—Ä—É —Ä–æ–ª–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ä–æ–ª–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã roll_ingredients
        cursor = db.session.execute(text("""
            SELECT ri.ingredient_id, ri.amount_per_roll, i.name, i.cost_per_unit, i.unit
            FROM roll_ingredients ri
            JOIN ingredients i ON ri.ingredient_id = i.id
            WHERE ri.roll_id = :roll_id
        """), {'roll_id': roll_id})
        
        ingredients = []
        total_cost = 0
        for row in cursor:
            amount_per_roll = float(row[1])
            cost_per_unit = float(row[3])
            ingredient_cost = amount_per_roll * cost_per_unit  # amount_per_roll * cost_per_unit
            total_cost += ingredient_cost
            
            ingredients.append({
                'ingredient_id': int(row[0]),
                'amount_per_roll': amount_per_roll,
                'name': row[2],
                'cost_per_unit': cost_per_unit,
                'unit': row[4],
                'calculated_cost': ingredient_cost
            })
        
        return jsonify({
            'roll_id': roll_id,
            'roll_name': roll.name,
            'ingredients': ingredients,
            'total_cost': total_cost
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/rolls/<int:roll_id>/recipe', methods=['PUT'])
@jwt_required()
def admin_update_roll_recipe(roll_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—É—Ä—É —Ä–æ–ª–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        ingredients = data.get('ingredients', [])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ—Ü–µ–ø—Ç—É—Ä—É
        db.session.execute(text("DELETE FROM roll_ingredients WHERE roll_id = :roll_id"), 
                          {'roll_id': roll_id})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ—Ü–µ–ø—Ç—É—Ä—É
        total_cost = 0
        for ingredient in ingredients:
            ingredient_id = ingredient['ingredient_id']
            amount = ingredient['amount']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
            cursor = db.session.execute(text("""
                SELECT cost_per_unit FROM ingredients WHERE id = :ingredient_id
            """), {'ingredient_id': ingredient_id})
            
            result = cursor.fetchone()
            if result:
                cost_per_unit = result[0]
                cost = cost_per_unit * amount
                total_cost += cost
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç
                db.session.execute(text("""
                    INSERT INTO roll_ingredients (roll_id, ingredient_id, amount_per_roll)
                    VALUES (:roll_id, :ingredient_id, :amount)
                """), {
                    'roll_id': roll_id,
                    'ingredient_id': ingredient_id,
                    'amount': amount
                })
            else:
                print(f"‚ö†Ô∏è –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å ID {ingredient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–ª–ª–∞
        roll.cost_price = total_cost
        roll.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–†–µ—Ü–µ–ø—Ç—É—Ä–∞ —Ä–æ–ª–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            'total_cost': total_cost,
            'ingredients_count': len(ingredients)
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/sets', methods=['GET', 'POST'])
@jwt_required()
def admin_sets():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        if request.method == 'GET':
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–æ–≤
            sets = Set.query.all()
            return jsonify({
                'sets': [set_item.to_dict() for set_item in sets],
                'total': len(sets)
            })
        elif request.method == 'POST':
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ç
            data = request.get_json()
            
            new_set = Set(
                name=data['name'],
                description=data.get('description', ''),
                cost_price=float(data['cost_price']),
                set_price=float(data['set_price']),
                discount_percent=data.get('discount_percent', 0.0),
                image_url=data.get('image_url', ''),
                is_popular=data.get('is_popular', False),
                is_new=data.get('is_new', False)
            )
            
            db.session.add(new_set)
            db.session.commit()
            
            return jsonify({
                'message': '–°–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'set': new_set.to_dict()
            }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/sets/<int:set_id>', methods=['PUT'])
@jwt_required()
def admin_update_set(set_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        set_item = Set.query.get(set_id)
        if not set_item:
            return jsonify({'error': '–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        set_item.name = data.get('name', set_item.name)
        set_item.description = data.get('description', set_item.description)
        set_item.cost_price = float(data.get('cost_price', set_item.cost_price))
        set_item.set_price = float(data.get('set_price', set_item.set_price))
        set_item.discount_percent = float(data.get('discount_percent', set_item.discount_percent))
        set_item.image_url = data.get('image_url', set_item.image_url)
        set_item.is_popular = data.get('is_popular', set_item.is_popular)
        set_item.is_new = data.get('is_new', set_item.is_new)
        set_item.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–°–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'set': set_item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/sets/<int:set_id>', methods=['DELETE'])
@jwt_required()
def admin_delete_set(set_id):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        set_item = Set.query.get(set_id)
        if not set_item:
            return jsonify({'error': '–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        db.session.delete(set_item)
        db.session.commit()
        
        return jsonify({'message': '–°–µ—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/ingredients', methods=['GET'])
@jwt_required()
def admin_get_ingredients():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        ingredients = Ingredient.query.all()
        return jsonify({
            'ingredients': [ing.to_dict() for ing in ingredients],
            'total': len(ingredients)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/ingredients', methods=['POST'])
@jwt_required()
def admin_create_ingredient():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        data = request.get_json()
        
        new_ingredient = Ingredient(
            name=data['name'],
            cost_per_unit=float(data['cost_per_unit']),
            price_per_unit=float(data['price_per_unit']),
            stock_quantity=float(data.get('stock_quantity', 0)),
            unit=data['unit']
        )
        
        db.session.add(new_ingredient)
        db.session.commit()
        
        return jsonify({
            'message': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            'ingredient': new_ingredient.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/ingredients/<int:ingredient_id>', methods=['PUT'])
@jwt_required()
def admin_update_ingredient(ingredient_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        ingredient = Ingredient.query.get(ingredient_id)
        if not ingredient:
            return jsonify({'error': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        ingredient.name = data.get('name', ingredient.name)
        ingredient.cost_per_unit = float(data.get('cost_per_unit', ingredient.cost_per_unit))
        ingredient.price_per_unit = float(data.get('price_per_unit', ingredient.price_per_unit))
        ingredient.stock_quantity = float(data.get('stock_quantity', ingredient.stock_quantity))
        ingredient.unit = data.get('unit', ingredient.unit)
        ingredient.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'ingredient': ingredient.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/ingredients/<int:ingredient_id>', methods=['DELETE'])
@jwt_required()
def admin_delete_ingredient(ingredient_id):
    """–£–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        ingredient = Ingredient.query.get(ingredient_id)
        if not ingredient:
            return jsonify({'error': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        db.session.delete(ingredient)
        db.session.commit()
        
        return jsonify({'message': '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# –ê–¥–º–∏–Ω API endpoints –¥–ª—è —Å–æ—É—Å–æ–≤/–Ω–∞–ø–∏—Ç–∫–æ–≤ (other_items)
@app.route('/api/admin/other-items', methods=['GET', 'POST'])
@jwt_required()
def admin_other_items():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        if request.method == 'GET':
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            items = OtherItem.query.all()
            return jsonify({
                'items': [item.to_dict() for item in items],
                'total': len(items)
            })
        elif request.method == 'POST':
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            data = request.get_json()
            
            new_item = OtherItem(
                name=data['name'],
                description=data.get('description', ''),
                cost_price=float(data['cost_price']),
                sale_price=float(data['sale_price']),
                category=data['category'],
                image_url=data.get('image_url', ''),
                stock_quantity=data.get('stock_quantity', 0),
                is_available=True
            )
            
            db.session.add(new_item)
            db.session.commit()
            
            return jsonify({
                'message': '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
                'item': new_item.to_dict()
            }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/other-items/<int:item_id>', methods=['PUT'])
@jwt_required()
def admin_update_other_item(item_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        item = OtherItem.query.get(item_id)
        if not item:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        
        item.name = data.get('name', item.name)
        item.description = data.get('description', item.description)
        item.cost_price = float(data.get('cost_price', item.cost_price))
        item.sale_price = float(data.get('sale_price', item.sale_price))
        item.category = data.get('category', item.category)
        item.image_url = data.get('image_url', item.image_url)
        item.stock_quantity = data.get('stock_quantity', item.stock_quantity)
        item.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/other-items/<int:item_id>', methods=['DELETE'])
@jwt_required()
def admin_delete_other_item(item_id):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        item = OtherItem.query.get(item_id)
        if not item:
            return jsonify({'error': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        db.session.delete(item)
        db.session.commit()
        
        return jsonify({'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/stats', methods=['GET'])
@jwt_required()
def admin_get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        total_users = User.query.count()
        total_rolls = Roll.query.count()
        total_sets = Set.query.count()
        total_ingredients = Ingredient.query.count()
        active_users = User.query.filter_by(is_active=True).count()
        
        return jsonify({
            'stats': {
                'total_users': total_users,
                'total_rolls': total_rolls,
                'total_sets': total_sets,
                'total_ingredients': total_ingredients,
                'active_users': active_users
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–∞–≤–æ–º —Å–µ—Ç–æ–≤
@app.route('/api/admin/sets/<int:set_id>/composition', methods=['GET'])
@jwt_required()
def admin_get_set_composition(set_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        current_user_id = get_jwt_identity()
        user = User.query.get(current_user_id)
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–∞
        query = text("""
            SELECT sr.set_id, sr.roll_id, sr.quantity,
                   r.name, r.cost_price, r.sale_price
            FROM set_rolls sr
            JOIN rolls r ON sr.roll_id = r.id
            WHERE sr.set_id = :set_id
        """)
        
        result = db.session.execute(query, {'set_id': set_id})
        rows = result.fetchall()
        
        composition = []
        for row in rows:
            composition.append({
                'set_id': row.set_id,
                'roll_id': row.roll_id,
                'quantity': row.quantity,
                'roll_name': row.name,
                'roll_cost_price': float(row.cost_price),
                'roll_sale_price': float(row.sale_price)
            })
        
        return jsonify({
            'success': True,
            'set_id': set_id,
            'composition': composition
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/sets/<int:set_id>/composition', methods=['PUT'])
@jwt_required()
def admin_update_set_composition(set_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        current_user_id = get_jwt_identity()
        user = User.query.get(current_user_id)
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        data = request.get_json()
        items = data.get('items', [])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–æ—Å—Ç–∞–≤
        db.session.execute(text("DELETE FROM set_rolls WHERE set_id = :set_id"), {'set_id': set_id})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤
        total_cost = 0
        total_sale_price = 0
        composition_for_description = []
        
        for item_data in items:
            item_id = item_data['item_id']
            item_type = item_data['item_type']
            quantity = item_data['quantity']
            
            # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–ª–ª—ã (–¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
            if item_type == 'roll':
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–∞–≤
                db.session.execute(text("""
                    INSERT INTO set_rolls (set_id, roll_id, quantity)
                    VALUES (:set_id, :roll_id, :quantity)
                """), {'set_id': set_id, 'roll_id': item_id, 'quantity': quantity})
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ä–æ–ª–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                roll_query = text("SELECT cost_price, sale_price, name FROM rolls WHERE id = :roll_id")
                roll_result = db.session.execute(roll_query, {'roll_id': item_id}).fetchone()
                if roll_result:
                    total_cost += roll_result.cost_price * quantity
                    total_sale_price += roll_result.sale_price * quantity
                    # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ç–∞
                    composition_for_description.append(f"{roll_result.name} x{quantity}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å–µ—Ç–∞ (—Å–æ —Å–∫–∏–¥–∫–æ–π 10%)
        set_sale_price = total_sale_price * 0.9
        discount_percent = 10.0
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        description_text = '–í–∫–ª—é—á–∞–µ—Ç: ' + ', '.join(composition_for_description) if composition_for_description else ''

        db.session.execute(text("""
            UPDATE sets 
            SET cost_price = :cost_price, 
                set_price = :set_price,
                description = :description,
                discount_percent = :discount_percent
            WHERE id = :set_id
        """), {
            'set_id': set_id,
            'cost_price': total_cost,
            'set_price': set_sale_price,
            'description': description_text,
            'discount_percent': discount_percent
        })
        
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': '–°–æ—Å—Ç–∞–≤ —Å–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'calculated_cost_price': total_cost,
            'calculated_sale_price': set_sale_price,
            'discount_percent': discount_percent,
            'description': description_text,
            'composition': composition_for_description
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def initialize_loyalty_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–ª—ã
        if LoyaltyRoll.query.count() == 0:
            # –ü–æ–ª—É—á–∞–µ–º 5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ä–æ–ª–ª–æ–≤
            cheapest_rolls = Roll.query.order_by(Roll.sale_price.asc()).limit(5).all()
            
            for roll in cheapest_rolls:
                loyalty_roll = LoyaltyRoll(
                    roll_id=roll.id,
                    is_available=True
                )
                db.session.add(loyalty_roll)
            
            db.session.commit()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(cheapest_rolls)} —Ä–æ–ª–ª–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        else:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
def process_loyalty_card(user_id, order_amount):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 1000 —Å–æ–º = 1 —Ä–æ–ª–ª)
        rolls_to_add = int(order_amount // 1000)
        
        if rolls_to_add == 0:
            return  # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é)
        active_card = LoyaltyCard.query.filter_by(
            user_id=user_id, 
            is_completed=False
        ).order_by(LoyaltyCard.created_at.desc()).first()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if not active_card:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            card_count = LoyaltyCard.query.filter_by(user_id=user_id).count() + 1
            card_number = f"LC-{user_id:03d}-{card_count:03d}"
            
            active_card = LoyaltyCard(
                user_id=user_id,
                card_number=card_number,
                filled_rolls=0,
                is_completed=False
            )
            db.session.add(active_card)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–ª—ã –∫ –∫–∞—Ä—Ç–µ
        current_filled = active_card.filled_rolls
        new_filled = min(current_filled + rolls_to_add, 8)
        active_card.filled_rolls = new_filled
        
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        if new_filled == 8:
            active_card.is_completed = True
            active_card.completed_at = datetime.utcnow()
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏—à–Ω–∏–µ —Ä–æ–ª–ª—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            extra_rolls = (current_filled + rolls_to_add) - 8
            if extra_rolls > 0:
                card_count = LoyaltyCard.query.filter_by(user_id=user_id).count() + 1
                new_card_number = f"LC-{user_id:03d}-{card_count:03d}"
                
                new_card = LoyaltyCard(
                    user_id=user_id,
                    card_number=new_card_number,
                    filled_rolls=extra_rolls,
                    is_completed=False
                )
                db.session.add(new_card)
        
        db.session.commit()
        print(f"‚úÖ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: +{rolls_to_add} —Ä–æ–ª–ª–æ–≤")
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    db.create_all()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìÅ –§–∞–π–ª: sushi_express.db")
    print("üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    print("   - users")
    print("   - ingredients") 
    print("   - rolls")
    print("   - roll_ingredients")
    print("   - sets")
    print("   - set_rolls")
    print("   - orders")
    print("   - order_items")
    print("   - loyalty_cards")
    print("   - loyalty_rolls")
    print("   - loyalty_card_usage")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    initialize_loyalty_system()

# ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =====

@app.route('/api/referral/my-code', methods=['GET'])
@jwt_required()
def get_my_referral_code():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'referral_code': user.referral_code,
            'bonus_points': user.bonus_points,
            'referrals_count': len(user.referrals_made)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/referral/check-code', methods=['POST'])
def check_referral_code():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    try:
        data = request.get_json()
        referral_code = data.get('referral_code', '').strip().upper()
        
        if not referral_code:
            return jsonify({'error': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        referrer_user = User.query.filter_by(referral_code=referral_code).first()
        
        if not referrer_user:
            return jsonify({'error': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        return jsonify({
            'valid': True,
            'referrer_name': referrer_user.name,
            'message': f'–ö–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_user.name}'
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/referral/my-referrals', methods=['GET'])
@jwt_required()
def get_my_referrals():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referrals = ReferralUsage.query.filter_by(referrer_id=user_id).all()
        
        referrals_data = []
        for referral in referrals:
            referrals_data.append({
                'id': referral.id,
                'referred_user_name': referral.referred.name,
                'referred_user_email': referral.referred.email,
                'bonus_points_awarded': referral.bonus_points_awarded,
                'created_at': referral.created_at.isoformat() if referral.created_at else None
            })
        
        return jsonify({
            'referrals': referrals_data,
            'total': len(referrals_data),
            'total_bonus_points': sum(r.bonus_points_awarded for r in referrals)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/referral/history', methods=['GET'])
@jwt_required()
def get_referral_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª)
        referrals_made = ReferralUsage.query.filter_by(referrer_id=user_id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referred_by_info = None
        if user.referred_by:
            referrer = User.query.filter_by(referral_code=user.referred_by).first()
            if referrer:
                referred_by_info = {
                    'referrer_name': referrer.name,
                    'referral_code': user.referred_by,
                    'bonus_points_received': user.bonus_points
                }
        
        referrals_made_data = []
        for referral in referrals_made:
            referrals_made_data.append({
                'id': referral.id,
                'referred_user_name': referral.referred.name,
                'bonus_points_awarded': referral.bonus_points_awarded,
                'created_at': referral.created_at.isoformat() if referral.created_at else None
            })
        
        return jsonify({
            'referred_by': referred_by_info,
            'referrals_made': referrals_made_data,
            'total_referrals_made': len(referrals_made_data),
            'total_bonus_points_earned': sum(r.bonus_points_awarded for r in referrals_made)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/cart/use-bonus', methods=['POST'])
@jwt_required()
def use_bonus_points():
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        bonus_to_use = data.get('bonus_points', 0)
        
        if bonus_to_use <= 0:
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}), 400
        
        if bonus_to_use > user.bonus_points:
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = json.loads(user.cart) if user.cart else []
        
        if not cart:
            return jsonify({'error': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}), 400
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        total_price = 0
        for cart_item in cart:
            item_type = cart_item['item_type']
            item_id = cart_item['item_id']
            quantity = cart_item['quantity']
            
            unit_price = 0
            if item_type == 'roll':
                roll = Roll.query.get(item_id)
                if roll:
                    unit_price = roll.sale_price
            elif item_type == 'set':
                set_item = Set.query.get(item_id)
                if set_item:
                    unit_price = set_item.set_price
            elif item_type == 'loyalty_roll':
                unit_price = 0.0  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–æ–ª–ª—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            
            total_price += unit_price * quantity
        
        if total_price <= 0:
            return jsonify({'error': '–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã'}), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        max_bonus_to_use = min(bonus_to_use, user.bonus_points, total_price)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
        bonus_item = {
            'item_type': 'bonus_points',
            'item_id': 'bonus',
            'quantity': 1,
            'price': -max_bonus_to_use,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ = —Å–∫–∏–¥–∫–∞
            'name': f'–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã ({max_bonus_to_use}‚ÇΩ)',
            'is_bonus': True,
            'added_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.append(bonus_item)
        user.cart = json.dumps(cart)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã
        user.bonus_points -= max_bonus_to_use
        
        db.session.commit()
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {max_bonus_to_use} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.name}")
        
        return jsonify({
            'success': True,
            'message': f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {max_bonus_to_use} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤',
            'bonus_points_used': max_bonus_to_use,
            'remaining_bonus_points': user.bonus_points,
            'discount_applied': max_bonus_to_use
        }), 200
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Sushi Express API —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    print("üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (sushi_express.db)")
    print("üîë JWT —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã 30 –¥–Ω–µ–π")
    print("=" * 50)
    
    app.run(debug=True, host='0.0.0.0', port=5000)
